#!/usr/bin/env ruby

require 'optparse'
require 'optparse/time'
require 'rubygems'
require 'open-uri'
require 'zlib'
require 'yajl'
require 'json'
require 'date'
require 'time'


options = {}

OptionParser.new do |parser|
  
  parser.banner = "Options:"

  parser.on("-a", "--after [DATETIME]", Time, "# Date to start search at, ISO8601 or YYYY-MM-DD format") do |datetime|
    @date_start = DateTime.parse(datetime.to_s)
  end
  
  parser.on("-b", "--before [DATETIME]", Time, "# ISO8601 Date to end search at, ISO8601 or YYYY-MM-DD format") do |datetime|
    @date_end = DateTime.parse(datetime.to_s)
    
  end
  
  parser.on("-t", "--top [INTEGER]", Integer, "# The number of repos to show") do |top|
    @top = top
  end
  
end.parse!


repos = {}

hour_step = (1.to_f / 24)

@date_start ||= DateTime.now - 28
@date_end   ||= DateTime.now
@top ||= 20


puts "Getting Github statistics from #{@date_start} to #{@date_end}"


@date_start.step(@date_end, hour_step).each do |d| 

  date_format = d.strftime('%F-%-k')

  gz = open( "http://data.githubarchive.org/#{date_format}.json.gz" )
  js = Zlib::GzipReader.new(gz).read

  Yajl::Parser.parse(js) do |event|
    
    event_type = event["type"]
    
    next unless ["PushEvent", "ForkEvent", "MemberEvent", "PullRequestEvent", "WatchEvent", "IssuesEvent"].include?(event_type)
    
    repo_name = event["repo"]["name"]
    event_action = event["payload"]["action"]
    
    repos[repo_name] ||= 0
    
    repos[repo_name] += 10 if event_type == "PushEvent"
    repos[repo_name] += 5  if event_type == "ForkEvent"
    repos[repo_name] += 3  if event_type == "MemberEvent" && event_action == "added"
    repos[repo_name] += 2  if event_type == "PullRequestEvent" && event_action == "closed" && event["payload"]["pull_request"]["merged"] == true
    repos[repo_name] += 1  if event_type == "WatchEvent"
    repos[repo_name] += 1  if event_type == "IssuesEvent" && event_action == "opened"
    
    
  end

end

puts "Results (~#{15} seconds):"

repos.sort_by { |k, v| v }.last(@top).reverse.each_with_index do |(repo, score), index|
  
  puts "##{index + 1}. #{repo}: #{score}"
  
end


puts repos.count